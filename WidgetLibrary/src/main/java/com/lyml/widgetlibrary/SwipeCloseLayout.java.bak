package com.lyml.widgetlibrary;

import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import android.widget.LinearLayout;

/**
 * Created by LYML on 2018-02-24.
 */

public class SwipeCloseLayout extends LinearLayout {

    private static final String TAG = "SwipeCloseLayout";

    public static final int SCROLL_STATE_NORMAL = 0;
    public static final int SCROLL_STATE_LEFT = 1;
    public static final int SCROLL_STATE_RIGHT = 2;

//    //滑动事件
//    private OnSwipedListener onSwipedListener;

    private boolean toInitScroll=false;

    private int rightScrollMax =0;
    private int leftScrollMax =0;
    private int scaledTouchSlop;
    private float downY;
    private boolean toScroll = false;
    private float lastTranY;
    private ValueAnimator animator;



    public SwipeCloseLayout(Context context) {
        super(context);
        scaledTouchSlop = ViewConfiguration.get(this.getContext()).getScaledTouchSlop();
    }

    public SwipeCloseLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
        scaledTouchSlop = ViewConfiguration.get(this.getContext()).getScaledTouchSlop();
    }

    public SwipeCloseLayout(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        scaledTouchSlop = ViewConfiguration.get(this.getContext()).getScaledTouchSlop();
    }

//    public void setOnSwipedListener(OnSwipedListener onSwipedListener) {
//        this.onSwipedListener = onSwipedListener;
//    }
//
//    /**
//     * 获得当前状态
//     *
//     * @return
//     */
//    public int getScrollState() {
//        return scrollState;
//    }
//
//    /**
//     * 切换到状态
//     *
//     * @param scrollState
//     */
//    public void setScrollState(int scrollState) {
//        if (animator != null && animator.isRunning())
//            animator.cancel();
//        if (scrollState != this.scrollState) {
//            if (onSwipedListener != null)
//                onSwipedListener.onSwiped(scrollState, this.scrollState);
//        }
//        switch (scrollState) {
//            case SCROLL_STATE_NORMAL:
//                scrollTo(leftScrollMax, 0);
//                this.scrollState = scrollState;
//                break;
//            case SCROLL_STATE_LEFT:
//                scrollTo(0, 0);
//                this.scrollState = scrollState;
//                break;
//            case SCROLL_STATE_RIGHT:
//                scrollTo(leftScrollMax + rightScrollMax, 0);
//                this.scrollState = scrollState;
//                break;
//        }
//    }

//    /**
//     * 平滑滚动到状态
//     *
//     * @param scrollState
//     */
//    public void smoothScrollToState(int scrollState) {
//        if (animator != null && animator.isRunning())
//            animator.cancel();
//        if (scrollState != this.scrollState) {
//            if (onSwipedListener != null)
//                onSwipedListener.onSwiped(scrollState, this.scrollState);
//        }
//        switch (scrollState) {
//            case SCROLL_STATE_NORMAL:
//                animator = ValueAnimator.ofInt(getScrollX(), leftScrollMax);
//                this.scrollState = scrollState;
//                break;
//            case SCROLL_STATE_LEFT:
//                animator = ValueAnimator.ofInt(getScrollX(), 0);
//                this.scrollState = scrollState;
//                break;
//            case SCROLL_STATE_RIGHT:
//                animator = ValueAnimator.ofInt(getScrollX(), leftScrollMax + rightScrollMax);
//                this.scrollState = scrollState;
//                break;
//        }
//        animator.removeAllUpdateListeners();
//        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
//            @Override
//            public void onAnimationUpdate(ValueAnimator animation) {
//                scrollTo((int) animation.getAnimatedValue(), 0);
//            }
//        });
//        animator.start();
//    }

    /**
     * onMeasure前处理defaultView宽度
     *
     * @param widthMeasureSpec
     * @param heightMeasureSpec
     */
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        Log.d("SwipeCloseLayout", "onMeasure");
    }

    /**
     * onLayout后处理初始滚动位置
     *
     * @param changed
     * @param l
     * @param t
     * @param r
     * @param b
     */
    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);
        Log.d("SwipeCloseLayout", "onLayout");
    }

    float startX;
    float startY;

//    /**
//     * 在子控件上发生横向滑动时拦截Touch事件
//     *
//     * @param event
//     * @return
//     */
//    @Override
//    public boolean dispatchTouchEvent(MotionEvent event) {
//        switch (event.getAction()) {
//            case MotionEvent.ACTION_DOWN:
//                Log.i(TAG, "dispatch ACTION_DOWN");
////                getParent().requestDisallowInterceptTouchEvent(true);
////                lastTranY = this.getTranslationY();
//                getParent().requestDisallowInterceptTouchEvent(true);// 不要拦截,
//// 这样是为了保证ACTION_MOVE调用
//                startX = (int) event.getRawX();
//                startY = (int) event.getRawY();
//
//                break;
//            case MotionEvent.ACTION_MOVE:
//                Log.i(TAG, "dispatch ACTION_MOVE");
//                int endX = (int) event.getRawX();
//                int endY = (int) event.getRawY();
//
//                if (Math.abs(endX - startX) < Math.abs(endY - startY)) {// 左右滑动
//                    getParent().requestDisallowInterceptTouchEvent(true);
//                }
//                break;
//        }
//        return super.dispatchTouchEvent(event);
//    }

//    /**
//     * 在子控件上发生横向滑动时拦截Touch事件
//     *
//     * @param event
//     * @return
//     */
//    @Override
//    public boolean onInterceptTouchEvent(MotionEvent event) {
//        switch (event.getAction()) {
//            case MotionEvent.ACTION_DOWN:
//                Log.i(TAG, "Intercept ACTION_DOWN");
//                lastTranY = this.getTranslationY();
////                downX = event.getRawX();
//                downY = event.getRawY();
//                getParent().requestDisallowInterceptTouchEvent(true);
//                break;
//            case MotionEvent.ACTION_MOVE:
//                Log.i(TAG, "Intercept ACTION_MOVE");
////                float moveX = event.getRawX();
//                float moveY = event.getRawY();
//                //发生横向滑动拦截
//                if (Math.abs(moveY - downY) > scaledTouchSlop) {
//                    return true;
//                }
//        }
//        return super.onInterceptTouchEvent(event);
//    }

    /**
     * 滚动处理
     *
     * @param event
     * @return
     */
    @Override
    public boolean onTouchEvent(MotionEvent event) {
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    Log.i(TAG, "ACTION_DOWN");
                    lastTranY = this.getTranslationY();
//                    downX = event.getRawX();
                    downY = event.getRawY();
                    break;
                case MotionEvent.ACTION_MOVE:
                    Log.i(TAG, "ACTION_MOVE");
//                    float moveX = event.getRawX();
                    float moveY = event.getRawY();

                    //横向滑动，一旦确定为横向滑动，标志位toScroll为true，只有在ActionUp才能置false
                    if (!toScroll && (Math.abs(moveY - downY) > scaledTouchSlop)) {
                        if (animator != null && animator.isRunning())
                            animator.cancel();
                        toScroll = true;
                        //请求父控件不拦截
                        getParent().requestDisallowInterceptTouchEvent(true);
                        //取消事件
                        MotionEvent cancelEvent = MotionEvent.obtain(event);
                        cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (event.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
                        onTouchEvent(cancelEvent);
                    }

                    if (toScroll) {
                        //滑动限制
                        float scrollY = lastTranY + (moveY - downY);
                        if (scrollY < 0)
                            scrollY = 0;
//                        else if (scrollY > leftScrollMax + rightScrollMax)
//                            scrollY = leftScrollMax + rightScrollMax;
//                        scrollTo((int) scrollX, 0);
                        this.setTranslationY(scrollY);

//                        calcOnScrolled();
                    }
                    break;
//                case MotionEvent.ACTION_UP:
//                    if (toScroll) {
//                        if (getScrollX() > leftScrollMax + rightScrollMax / 2) {
//                            animator = ValueAnimator.ofInt(getScrollX(), leftScrollMax + rightScrollMax);
//                            if (onSwipedListener != null)
//                                onSwipedListener.onSwiped(SCROLL_STATE_RIGHT, scrollState);
//                            scrollState = SCROLL_STATE_RIGHT;
//                        } else if (getScrollX() < leftScrollMax / 2) {
//                            animator = ValueAnimator.ofInt(getScrollX(), 0);
//                            if (onSwipedListener != null)
//                                onSwipedListener.onSwiped(SCROLL_STATE_LEFT, scrollState);
//                            scrollState = SCROLL_STATE_LEFT;
//                        } else {
//                            animator = ValueAnimator.ofInt(getScrollX(), leftScrollMax);
//                            if (onSwipedListener != null)
//                                onSwipedListener.onSwiped(SCROLL_STATE_NORMAL, scrollState);
//                            scrollState = SCROLL_STATE_NORMAL;
//                        }
//                        animator.removeAllUpdateListeners();
//                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
//                            @Override
//                            public void onAnimationUpdate(ValueAnimator animation) {
//                                scrollTo((int) animation.getAnimatedValue(), 0);
//                                calcOnScrolled();
//                            }
//                        });
//                        animator.start();
//                        toScroll = false;
//                    }
//                    break;
            }
        return super.onTouchEvent(event);
    }

//    /**
//     * 默认控件左边的最大可滑动距离，考虑Margins
//     *
//     * @return
//     */
//    private int getLeftScrollMax() {
//        int viewCount = this.getChildCount();
//        int scroll = 0;
//        if (viewCount > defaultView)
//            for (int i = 0; i < defaultView; i++)
//                scroll += getWidthWithMargin(this.getChildAt(i));
//        return scroll - getLeftScrollCorrect();
//    }
//
//    /**
//     * 默认控件右边的最大滑动距离，考虑Margin
//     *
//     * @return
//     */
//    private int getRightScrollMax() {
//        int viewCount = this.getChildCount();
//        int scroll = 0;
//        if (viewCount > defaultView)
//            for (int i = defaultView + 1; i < viewCount; i++)
//                scroll += getWidthWithMargin(this.getChildAt(i));
//        return scroll - getRightScrollCorrect();
//    }
//
//    /**
//     * 当所有控件宽度和小于屏幕时，修正左边的最大可滚动距离
//     *
//     * @return
//     */
//    private int getLeftScrollCorrect() {
//        int viewCount = this.getChildCount();
//        int width = 0;
//        for (int i = defaultView; i < viewCount; i++) {
//            width += getWidthWithMargin(this.getChildAt(i));
//            if (width >= this.getWidth())
//                break;
//        }
//        if (width < this.getWidth())
//            return this.getWidth() - width;
//        else
//            return 0;
//    }
//
//    /**
//     * 当所有控件宽度和小于屏幕时和大于屏幕时，修正右边的最大可滚动距离
//     *
//     * @return
//     */
//    private int getRightScrollCorrect() {
//        int viewCount = this.getChildCount();
//        int width = 0;
//        for (int i = defaultView; i < viewCount; i++)
//            width += getWidthWithMargin(this.getChildAt(i));
//
//        if (width >= this.getWidth())
//            return this.getWidth() - getWidthWithMargin(this.getChildAt(defaultView));
//        else
//            return width - getWidthWithMargin(this.getChildAt(defaultView));
//    }
//
//    private int getWidthWithMargin(View view) {
//        LayoutParams lp = (LayoutParams) view.getLayoutParams();
//        return view.getWidth() + lp.leftMargin + lp.rightMargin;
//    }

//    private void calcOnScrolled(){
//        if (onSwipedListener != null) {
//            int state=-1;
//            float offset=0;
//            int offsetPixels=0;
//            int scroll=getScrollX();
//            if (scroll < leftScrollMax) {
//                state=SCROLL_STATE_LEFT;
//                offsetPixels=scroll;
//                offset=(float)offsetPixels/leftScrollMax;
//            } else if (scroll < leftScrollMax + rightScrollMax) {
//                state = SCROLL_STATE_NORMAL;
//                offsetPixels=scroll-leftScrollMax;
//                offset=(float)offsetPixels/rightScrollMax;
//            } else {
//                state=SCROLL_STATE_RIGHT;
//                offsetPixels=0;
//                offset=0;
//            }
//            onSwipedListener.onScrolled(state,offset,offsetPixels);
//        }
//    }

//    public interface OnSwipedListener {
//        void onSwiped(int state, int stateOld);
//        void onScrolled(int state,float stateOffset,int stateOffsetPixels);
//    }
}
